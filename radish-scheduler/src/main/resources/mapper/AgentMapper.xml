<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace必须指向Mapper接口 -->
<mapper namespace="org.sam.shen.scheduing.mapper.AgentMapper">
    <resultMap type="Agent" id="agentMap">
        <result column="id" property="id"/>
        <result column="agent_name" property="agentName"/>
        <result column="agent_ip" property="agentIp"/>
        <result column="agent_port" property="agentPort"/>
        <result column="admin" property="admin"/>
        <result column="admin_email" property="adminEmail"/>
        <result column="admin_phone" property="adminPhone"/>
        <result column="reg_time" property="regTime"/>
        <result column="stat" property="stat"/>
        <result column="network" property="network"/>
        <result column="netty_port" property="nettyPort"/>
    </resultMap>

    <select id="findAgentById" parameterType="Long" resultMap="agentMap">
        <![CDATA[
            SELECT id, agent_name, agent_ip, agent_port, admin, admin_email, admin_phone, reg_time, stat, network, netty_port
            FROM agent
        ]]>
        <where>
            <![CDATA[
                id = #{agentName}
            ]]>
        </where>
    </select>

    <select id="findAgentByName" parameterType="String" resultMap="agentMap">
        <![CDATA[
            SELECT id, agent_name, agent_ip, agent_port, admin, admin_email, admin_phone, reg_time, stat, network, netty_port
            FROM agent
		]]>
        <where>
            <![CDATA[
                agent_name = #{agentName}
            ]]>
        </where>
    </select>

    <select id="queryAgentForPagerUser" resultMap="agentMap" parameterType="string">
        SELECT
            a.id ,
            a.agent_name ,
            a.agent_ip ,
            a.agent_port ,
            a.admin ,
            a.admin_email ,
            a.admin_phone ,
            a.reg_time ,
            a.stat ,
            a.network ,
            a.netty_port
        FROM agent a, agent_group_ref b, user_agent_group c
        where a.id = b.agent_id and b.agent_group_id = c.group_id
        <if test="agentName != null">
            AND a.agent_name LIKE CONCAT(#{agentName}, '%')
        </if>
        <if test="userId != null">
            AND c.user_id = #{userId}
        </if>
    </select>

    <select id="queryAgentForPager" resultMap="agentMap" parameterType="string">
        <![CDATA[
	        SELECT id, agent_name, agent_ip, agent_port, admin, admin_email, admin_phone, reg_time, stat, network, netty_port
	        FROM agent
        ]]>
        <if test="agentName != null">
            <where>
                agent_name LIKE CONCAT(#{agentName}, '%')
            </where>
        </if>
    </select>

    <select id="queryAgentForList" resultMap="agentMap" parameterType="string">
        <![CDATA[
            SELECT id, agent_name, agent_ip, agent_port, admin, admin_email, admin_phone, reg_time, stat, network, netty_port
            FROM agent
        ]]>
        <if test="agentName != null">
            <where>
                agent_name LIKE CONCAT(#{agentName}, '%')
            </where>
        </if>
    </select>

    <insert id="saveAgent" parameterType="Agent" useGeneratedKeys="true" keyProperty="id">
        <![CDATA[
            INSERT INTO agent(agent_name, agent_ip, agent_port, admin, admin_email, admin_phone, reg_time, stat, network, netty_port)
            VALUES (#{agentName}, #{agentIp}, #{agentPort}, #{admin},
                    #{adminEmail}, #{adminPhone}, #{regTime}, #{stat}, #{network}, #{nettyPort})
        ]]>
    </insert>

    <update id="upgradeAgentAdmin" parameterType="Agent">
        <![CDATA[
            UPDATE agent
            SET admin = #{admin}, admin_email = #{adminEmail}, admin_phone = #{adminPhone}
            WHERE id = #{id}
        ]]>
    </update>

    <update id="upgradeAgent" parameterType="Agent">
        <![CDATA[
            UPDATE agent
            SET agent_port = #{agentPort}, admin = #{admin}, admin_email = #{adminEmail}, admin_phone = #{adminPhone}, network = #{network}, netty_port = #{nettyPort}
            WHERE id = #{id}
        ]]>
    </update>

    <select id="countAgent" resultType="int">
        <![CDATA[
            SELECT count(a.id) cnt FROM agent a LEFT JOIN agent_group_ref agf on a.id=agf.agent_id LEFT JOIN user_agent_group uag on agf.agent_group_id=uag.group_id
        ]]>
        <where>
            <if test="userId != null">uag.user_id = #{userId}</if>
        </where>
    </select>

    <select id="queryAgentByAgentGroup" resultMap="agentMap" parameterType="long">
        <![CDATA[
            SELECT a.id, agent_name, agent_ip, agent_port, admin, admin_email, admin_phone, reg_time, stat, network, netty_port
            FROM agent a
            INNER JOIN agent_group_ref agr
            ON a.id = agr.agent_id
            WHERE agr.agent_group_id = #{agentGroupId}
        ]]>
    </select>

    <select id="queryAgentInIds" parameterType="list" resultMap="agentMap">
        <![CDATA[
            SELECT id, agent_name, agent_ip, agent_port, admin, admin_email, admin_phone, reg_time, stat, network, netty_port
            FROM agent
            WHERE id IN
        ]]>
        <foreach collection="list" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>

    <delete id="deleteAgent" parameterType="java.lang.Long">
        DELETE a, ah FROM agent a, agent_handler ah WHERE a.id = ah.agent_id and a.id = #{agentId}
    </delete>
</mapper>